---
title:  "소프트웨어 스레드와 하드웨어 스레드의 차이점"
date:   2021-05-03
categories: 사설
---

최근에, 운영체제에 대해 공부하기 위해 [공룡책](https://www.wiley.com/en-us/Operating+System+Concepts%2C+10th+Edition-p-9781119320913)을 읽기 시작했다.
CPU 스케듈링 관련 장을 읽던 중, 하드웨어 스레드가 언급되었다.

만약, 컴퓨터 공학/과학 관련 기본 수업을 들었다면, 스레드와 병행성(concurrency)에 대해 들어본 적이 있을 것이다.
이 문맥에서 등장하는 스레드는 *소프트웨어* 스레드에 해당한다.
많은 앱들이 가동하기 위해 필요한 서버는 소프트웨어 스레드의 가장 흔한 용도 중 하나로 볼 수 있다.
서버를 구현하는 방식은 다양하며 그중 한가지 방법으로는 스레드풀(pool of threads)을 사용하여 각 스레드가 클라이언트 연결을 담당하는 방법이 있다.
[Pthread](https://man7.org/linux/man-pages/man7/pthreads.7.html)와 같은 스레드 라이브러리를 통해 효율적(efficient)이며 반응적인(responsive) 프로그램을 만들 수 있다.

소프트웨어 스레드와는 대조적으로, *하드웨어* 스레드는 CPU에 있는 것이다.
요즘에는 기술이 발전하여 멀티 코어는 당연하고 멀티 스레드/하이퍼 스레드까지 있다.
예를 들어, 64 코어 및 128 스레드가 있는 AMD 사의 Threadripper CPU 도 있다.

이 책을 읽기 전까지, 항상 이 두 가지 스레드의 관계가 궁금했고, 드디어 오랜기간 궁금증을 풀 수 있었다.
이 글을 통해 미래의 나뿐만 아니라 같은 궁금증을 가지고 있는 타인들을 위해 도움이 되었으면 한다.
이 글에서 나오는 많은 정보는 공룡책이 바탕이지만 오류를 찾게 된다면 꼭 [저한테](mailto:just4ink007@gmail.com) 알려주세요 :)

시작하기에 앞서, 하드웨어 스레드를 통해서 어떠한 이득을 볼 수 있는지 알아보자.
CPU가 명령(instruction)을 실행/연산할 때, 몇몇 명령은 메모리를 읽는 작업을 하게 할 수도 있고 나중에 사용하도록 CPU 레지스터에 저장하게 할 수도 있다.
메모리를 읽는 작업은 CPU의 연산 속도보다 매우 느리다.
이 속도 차이로 인해 CPU가 메모리에 의해 발목이 잡히는 현상이 발생하는데, 이를 메모리 지연(memory stall)이라고 한다.
만약 메모리 접근 속도가 CPU의 연산 속도와 맞먹는다고 해도 cache miss 와 같은 현상으로 인해 메모리 지연이 생길 수 있다.

![memory hierarchy](https://upload.wikimedia.org/wikipedia/commons/0/00/Cache_Hierarchy_Updated.png)

위 사진은 메모리의 계층 구조를 보여준다.
더 높은 위치에 있을수록 읽기/쓰기 속도는 빠르지만, 용량은 상대적으로 적다.
그러므로, L1 캐시는 메인 메모리(RAM)보다 훨씬 접근 속도가 빠르지만 저장 용량은 KiB 및 MiB로 보통 몇 GiB에 해당하는 램보다 훨씬 적다.
메인 메모리에 비해 캐시는 현저히 적으므로, 캐시에 현재 돌아가는 프로그램 스택들을 전부 담기는 역부족이다.
그러므로, 간간히 캐시에 없는 내용물을 필요로 할 수 있고 캐시에 없어서 메인 메모리를 확인하게되는, cache miss 현상이 발생하게 된다.

정리하자면, CPU는 메모리 접근을 필요로 하는 작업을 할 때 연산을 하지 않고 놀게 된다.
이러한 메모리 지연을 줄이기위해, 추가적인 스레드를 통해 CPU가 놀고있을 때 연산할 것을 더 줄 수 있다.

![multithreaded](/assets/images/2021-05-03-threads-1.jpg)

위 사진은 책에서 나온 것으로, C는 compute cycle, 즉 CPU가 연산하는 구간을 의미하며, M은 메모리 지연이 일어나는 구간을 의미한다.
한 CPU 코어에 두 스레드를 사용하여 위와 같이 이상적인 상황에서 메모리 지연을 없앨 수 있다.

이제 하드웨어 스레드의 목적을 알았으니, 하드웨어 스레드와 소프트웨어 스레드의 관계에 대해 알아보자.

![two levels of scheduling](/assets/images/2021-05-03-threads-02.png)

위 사진은 많은 소프트웨어 스레드가 하드웨어 스레드에 지정되고 또 하드웨어 스레드가 코어로 지정되는 것을 보여준다.
많은 소프트웨어 스레드가 하드웨어 스레드에 지정되는 방식은 운영체제가 관리한다.
보통, 운영체제는 각 하드웨어 스레드를 논리적(logical) CPU로 인식하여 각 스레드에 마치 실제 CPU코어처럼 소프트웨어 스레드를 스케듈링한다.
스케듈링 방식으로는 라운드로빈(round-robin), 우선대기열(priority queue), 및 기타 알고리즘을 사용하며 여기서 설명하기에는 너무 길어질 것같아 생략한다.
예외적으로, 운영체제는 가끔 이 스레드를 실제 CPU코어와는 다르게 인식하여 소프트웨어 스레드를 아예 다른 코어의 스레드에 지정하여 멀티 코어 프로세터의 장점을 부각시킬 수 있다.

요약하자면, 운영체제가 소프트웨어 스레드를 하드웨어 스레드에 지정하여 CPU 코어가 프로그램을 실행시킬 수 있도록 한다.
